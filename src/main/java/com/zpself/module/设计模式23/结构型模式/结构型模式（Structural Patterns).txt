-----------------------------1.适配器模式-----------------------------https://www.runoob.com/design-pattern/adapter-pattern.html
主要解决：主要解决在软件系统中，常常要将一些"现存的对象"放到新的环境中，而新环境要求的接口是现对象不能满足的。
通过接口转换，将一个类插入另一个类系中，（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）
优点：
    1、可以让任何两个没有关联的类一起运行。
    2、提高了类的复用。
    3、增加了类的透明度。
    4、灵活性好
缺点：
    1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。
        比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。
        因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
    2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。？？？？？
使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。
注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题【维护旧项目，但不想改以前的代码，对扩展的开放】。


-----------------------------2.桥接模式-----------------------------https://www.runoob.com/design-pattern/bridge-pattern.html
桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化
主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。
何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。
如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。
应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，
           即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。
关键代码：-----【抽象类依赖实现类。  图形（灵魂）  依赖  绘画这个动作（肉体）】
优点：
    1、抽象和实现的分离。
    2、优秀的扩展能力。
    3、实现细节对客户透明。
缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。

使用场景：
    1、如果一个系统需要在构件的  抽象化角色  和  具体化角色  之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，
       通过桥接模式可以使它们在抽象层建立一个关联关系。
    2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。
    3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。



-----------------------------3.过滤器模式-----------------------------https://www.runoob.com/design-pattern/bridge-pattern.html
开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。---【简单的筛选、合并筛选条件】
这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。



-----------------------------4.组合模式-----------------------------
优点： 1、高层模块调用简单。 2、节点自由增加。 ---【树形结构、子子孙孙】
缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。
使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。


-----------------------------5.装饰模式-----------------------------https://www.runoob.com/design-pattern/decorator-pattern.html
装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构
主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。
何时使用：在不想增加很多子类的情况下扩展类。
优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
缺点：多层装饰比较复杂。
使用场景：
    1、扩展一个类的功能。
    2、动态增加功能，动态撤销。【装饰类：1.继承与被装饰类相同的接口，2.增加一个接口成员，3使用时成员属性可动态改变，不断装饰】
使用案例：咖啡厅案例不错....
    1、最开始是创建被装饰者，
    2.装饰者 装饰   被装饰者
    3、装饰者   能不断装饰   装饰者 ；【俄罗斯套娃】:组合模式是树，装饰就是单枝树

IO-------------https://blog.csdn.net/caihuangshi/article/details/51334097
●抽象构件(Component)角色：由InputStream扮演。这是一个抽象类，为各种子类型提供统一的接口。
●具体构件(ConcreteComponent)角色：由ByteArrayInputStream、FileInputStream、PipedInputStream、StringBufferInputStream等类扮演。
    它们实现了抽象构件角色所规定的接口。
●抽象装饰(Decorator)角色：由FilterInputStream扮演。它实现了InputStream所规定的接口。
●具体装饰(ConcreteDecorator)角色：由几个类扮演，分别是BufferedInputStream、DataInputStream
    以及两个不常用到的类LineNumberInputStream、PushbackInputStream。



-----------------------------6.外观模式-----------------------------
外观模式是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。
优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。
缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。
注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。【每个子类实现，提供一种方法】


-----------------------------7.享元模式-----------------------------
主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，
          如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。
何时使用：---【跟原型模式很像，通过对象的内部属性获取对象】
    1、系统中有大量对象。
    2、这些对象消耗大量内存。
    3、这些对象的状态大部分可以外部化。
    4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。
    5、系统不依赖于这些对象身份，这些对象是不可分辨的。
如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。
优点：大大减少对象的创建，降低系统的内存，使效率提高。
缺点：提高了系统的复杂度，需要分离出外部状态和内部状态，
      而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。
使用场景：
    1、系统有大量相似对象。
    2、需要缓冲池的场景。
注意事项：
    1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。
    2、这些类必须有一个工厂对象加以控制。



-----------------------------8.代理模式-----------------------------
在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
 如何解决：增加中间层。
 关键代码：实现与被代理类组合。
 应用实例：1、Windows 里面的快捷方式。
          2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，
          猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。
 注意事项：
    1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
    2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。